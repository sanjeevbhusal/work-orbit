// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Board {
  id             String          @id @default(uuid())
  name           String
  description    String?
  organizationId String
  smallImageUrl  String
  largeImageUrl  String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  columns        Column[]
  BoardActivity  BoardActivity[]
}

model Column {
  id                   String           @id @default(uuid())
  name                 String
  description          String?
  index                Int
  Board                Board            @relation(references: [id], fields: [boardId], onDelete: Cascade)
  boardId              String
  cards                Card[]
  ColumnActivity       ColumnActivity[]
  currentCardActivity  CardActivity[]   @relation("currentColumn")
  previousCardActivity CardActivity[]   @relation("previousColumn")
}

model Card {
  id           String         @id @default(uuid())
  name         String
  Column       Column         @relation(references: [id], fields: [columnId], onDelete: Cascade)
  columnId     String
  index        Int
  CardActivity CardActivity[]
  comments     Comment[]
}

enum EntityType {
  BOARD
  CARD
  COLUMN
}

enum ActivityType {
  CREATE
  UPDATE
  MOVE
}

enum ActivitySubType {
  BOARD
  COLUMN
  CARD
}

model Activity {
  id             String           @id @default(uuid())
  createdAt      DateTime         @default(now())
  userId         String?
  BoardActivity  BoardActivity[]
  subType        ActivitySubType
  ColumnActivity ColumnActivity[]
  CardActivity   CardActivity[]
}

model BoardActivity {
  id               String       @id @default(uuid())
  Activity         Activity     @relation(fields: [activityId], references: [id])
  activityId       String
  boardId          String
  Board            Board        @relation(fields: [boardId], references: [id])
  activityType     ActivityType
  currentName      String?
  previousName     String?
  currentImageUrl  String?
  previousImageUrl String?
}

model ColumnActivity {
  id           String       @id @default(uuid())
  Activity     Activity     @relation(fields: [activityId], references: [id])
  activityId   String
  columnId     String
  Column       Column       @relation(fields: [columnId], references: [id])
  activityType ActivityType
  currentName  String?
  previousName String?
}

model CardActivity {
  id               String       @id @default(uuid())
  Activity         Activity     @relation(fields: [activityId], references: [id])
  activityId       String
  cardId           String
  card             Card         @relation(fields: [cardId], references: [id], onDelete: Cascade)
  activityType     ActivityType
  previousColumnId String?
  currentColumnId  String
  previousColumn   Column?      @relation("previousColumn", fields: [previousColumnId], references: [id])
  currentColumn    Column       @relation("currentColumn", fields: [currentColumnId], references: [id])
}

model Comment {
  id        String   @id @default(uuid())
  text      String
  createdAt DateTime @default(now())
  userId    String
  cardId    String
  Card      Card     @relation(fields: [cardId], references: [id])
}
